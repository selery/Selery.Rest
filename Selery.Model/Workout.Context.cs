//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Selery.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using Selery.Model.Entity.Workout;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WorkoutEntities : DbContext
    {
        public WorkoutEntities()
            : base("name=WorkoutEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<spSelectCurrentUserProgram_Result> spSelectCurrentUserProgram(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelectCurrentUserProgram_Result>("spSelectCurrentUserProgram", userIDParameter);
        }
    
        public virtual ObjectResult<spSelectActivePrograms_Result> spSelectActivePrograms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelectActivePrograms_Result>("spSelectActivePrograms");
        }
    
        public virtual ObjectResult<spSelectProgramByID_Result> spSelectProgramByID(Nullable<int> programID)
        {
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelectProgramByID_Result>("spSelectProgramByID", programIDParameter);
        }
    
        public virtual ObjectResult<spUsersInPorgram_Result> spUsersInPorgram(Nullable<int> programID)
        {
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUsersInPorgram_Result>("spUsersInPorgram", programIDParameter);
        }
    
        public virtual int spUserProgramCurrentReset(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUserProgramCurrentReset", userIDParameter);
        }
    
        public virtual int spUserProgramDayExericeInsert(Nullable<int> userID, Nullable<int> programID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUserProgramDayExericeInsert", userIDParameter, programIDParameter);
        }
    
        public virtual ObjectResult<spUserProgramInsert_Result> spUserProgramInsert(Nullable<int> userID, Nullable<int> programID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUserProgramInsert_Result>("spUserProgramInsert", userIDParameter, programIDParameter);
        }
    
        public virtual ObjectResult<spSelectUserProgramByID_Result> spSelectUserProgramByID(Nullable<int> userProgramID)
        {
            var userProgramIDParameter = userProgramID.HasValue ?
                new ObjectParameter("UserProgramID", userProgramID) :
                new ObjectParameter("UserProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelectUserProgramByID_Result>("spSelectUserProgramByID", userProgramIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spUserProgramUpdate(Nullable<int> userID, Nullable<int> programID, Nullable<decimal> bMIStart)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var bMIStartParameter = bMIStart.HasValue ?
                new ObjectParameter("BMIStart", bMIStart) :
                new ObjectParameter("BMIStart", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spUserProgramUpdate", userIDParameter, programIDParameter, bMIStartParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spUserProgramUpdateCurrentDay(Nullable<int> userID, Nullable<int> programID, Nullable<int> currentDay)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var currentDayParameter = currentDay.HasValue ?
                new ObjectParameter("CurrentDay", currentDay) :
                new ObjectParameter("CurrentDay", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spUserProgramUpdateCurrentDay", userIDParameter, programIDParameter, currentDayParameter);
        }
    
        public virtual ObjectResult<spUserAvailableProgramsSelect_Result> spUserAvailableProgramsSelect(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUserAvailableProgramsSelect_Result>("spUserAvailableProgramsSelect", userIDParameter);
        }
    }
}
