//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Selery.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using Selery.Model.Entity.Nutrition;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NutritionEntities : DbContext
    {
        public NutritionEntities()
            : base("name=NutritionEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<spSelectFoodByID_Result> spSelectFoodByID(Nullable<int> foodID)
        {
            var foodIDParameter = foodID.HasValue ?
                new ObjectParameter("FoodID", foodID) :
                new ObjectParameter("FoodID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelectFoodByID_Result>("spSelectFoodByID", foodIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spUserDailyMenuInitialize(Nullable<int> userID, Nullable<int> programID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spUserDailyMenuInitialize", userIDParameter, programIDParameter);
        }
    
        public virtual ObjectResult<spUserDailyMenuSelectByDay_Result> spUserDailyMenuSelectByDay(Nullable<int> userID, Nullable<int> day)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUserDailyMenuSelectByDay_Result>("spUserDailyMenuSelectByDay", userIDParameter, dayParameter);
        }
    
        public virtual ObjectResult<spUserMenuCalories_Result> spUserMenuCalories(Nullable<int> userID, Nullable<int> programID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUserMenuCalories_Result>("spUserMenuCalories", userIDParameter, programIDParameter);
        }
    
        public virtual ObjectResult<spSelectFoodBySponsorAndMealTimeType_Result> spSelectFoodBySponsorAndMealTimeType(Nullable<int> sponsorID, Nullable<int> mealTimeTypeID)
        {
            var sponsorIDParameter = sponsorID.HasValue ?
                new ObjectParameter("SponsorID", sponsorID) :
                new ObjectParameter("SponsorID", typeof(int));
    
            var mealTimeTypeIDParameter = mealTimeTypeID.HasValue ?
                new ObjectParameter("MealTimeTypeID", mealTimeTypeID) :
                new ObjectParameter("MealTimeTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelectFoodBySponsorAndMealTimeType_Result>("spSelectFoodBySponsorAndMealTimeType", sponsorIDParameter, mealTimeTypeIDParameter);
        }
    
        public virtual ObjectResult<spUserProgramDayMealTimeFoodXRefUpdate_Result> spUserProgramDayMealTimeFoodXRefUpdate(Nullable<int> menuMealTimeFoodXRefID, Nullable<int> foodID, Nullable<decimal> carbohydrate, Nullable<decimal> protein, Nullable<decimal> fat, Nullable<decimal> calories, Nullable<decimal> qty)
        {
            var menuMealTimeFoodXRefIDParameter = menuMealTimeFoodXRefID.HasValue ?
                new ObjectParameter("MenuMealTimeFoodXRefID", menuMealTimeFoodXRefID) :
                new ObjectParameter("MenuMealTimeFoodXRefID", typeof(int));
    
            var foodIDParameter = foodID.HasValue ?
                new ObjectParameter("FoodID", foodID) :
                new ObjectParameter("FoodID", typeof(int));
    
            var carbohydrateParameter = carbohydrate.HasValue ?
                new ObjectParameter("Carbohydrate", carbohydrate) :
                new ObjectParameter("Carbohydrate", typeof(decimal));
    
            var proteinParameter = protein.HasValue ?
                new ObjectParameter("Protein", protein) :
                new ObjectParameter("Protein", typeof(decimal));
    
            var fatParameter = fat.HasValue ?
                new ObjectParameter("Fat", fat) :
                new ObjectParameter("Fat", typeof(decimal));
    
            var caloriesParameter = calories.HasValue ?
                new ObjectParameter("Calories", calories) :
                new ObjectParameter("Calories", typeof(decimal));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUserProgramDayMealTimeFoodXRefUpdate_Result>("spUserProgramDayMealTimeFoodXRefUpdate", menuMealTimeFoodXRefIDParameter, foodIDParameter, carbohydrateParameter, proteinParameter, fatParameter, caloriesParameter, qtyParameter);
        }
    }
}
